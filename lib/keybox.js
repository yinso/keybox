// Generated by CoffeeScript 1.10.0
(function() {
  var Keybox, Promise, Storage, User;

  Promise = require('bluebird');

  User = require('./user');

  Storage = require('./storage');

  Keybox = (function() {
    Keybox.initialize = function(options, cb) {
      var keybox;
      keybox = Keybox(options);
      return keybox.connect(cb);
    };

    function Keybox(options) {
      if (!(this instanceof Keybox)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Keybox, arguments, function(){});
      }
      this.options = options;
    }

    Keybox.prototype.connect = function(cb) {
      var self;
      self = this;
      return Storage.initialize(self.options.filePath, function(err, conn) {
        if (err) {
          return cb(err);
        } else {
          self.conn = conn;
          return cb(null, self);
        }
      });
    };

    Keybox.prototype.createUser = function(options, cb) {
      var user;
      user = User(options, this.conn);
      return cb(null, user);
    };

    return Keybox;

  })();

  Promise.promisifyAll(Keybox);

  Promise.promisifyAll(Keybox.prototype);

  module.exports = Keybox;

}).call(this);
