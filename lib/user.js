// Generated by CoffeeScript 1.10.0

/*
 * User
 *
 * the full user object is encrypted.
 */

(function() {
  var Crypto, Password, Promise, User;

  Crypto = require('./crypto');

  Password = require('./password');

  Promise = require('bluebird');

  User = (function() {
    User.prefix = 'user:';

    User.encType = 'aes256';

    User.hashType = 'sha256';

    User.deriveHash = function(password, salt, cb) {
      return Crypto.createKey(this.encType, password, salt, function(err, buffer) {
        if (err) {
          return cb(err);
        } else {
          return cb(null, buffer.toString('hex'));
        }
      });
    };

    User.deserialize = function(serialized, username, password, cb) {
      return this.deriveHashAsync(password, username).then(function(hash) {
        var key;
        console.log('User.deserialize:HASH', hash);
        key = 'user:' + username + ',' + hash;
        return Crypto.decryptAsync(key, serialized);
      }).then(function(res) {
        return cb(null, User(JSON.parse(res)));
      })["catch"](cb);
    };

    function User(options) {
      var key, val;
      if (options == null) {
        options = {};
      }
      if (!(this instanceof User)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(User, arguments, function(){});
      }
      console.log('User.ctor', options);
      for (key in options) {
        val = options[key];
        this[key] = val;
      }
    }

    User.prototype.setPassword = function(password, cb) {
      var self;
      self = this;
      return User.deriveHashAsync(password, this.username).then(function(hash) {
        self.hash = hash;
        console.log('User.setPassword', password, hash);
        return cb(null);
      })["catch"](cb);
    };

    User.prototype.serializeKey = function(cb) {
      return Crypto.hash(User.hashType, 'user:' + this.username, cb);
    };

    User.prototype.serialize = function(cb) {
      var data, password;
      console.log('User.serialize:HASH', this.hash);
      password = 'user:' + this.username + ',' + this.hash;
      data = JSON.stringify({
        username: this.username,
        hash: this.hash,
        masterKey: this.masterKey,
        keys: this.keys || {}
      });
      return Crypto.encrypt(User.encType, password, data, cb);
    };

    return User;

  })();

  Promise.promisifyAll(User);

  Promise.promisifyAll(User.prototype);

  module.exports = User;

}).call(this);
